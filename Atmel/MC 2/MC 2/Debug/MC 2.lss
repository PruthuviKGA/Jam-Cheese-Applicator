
MC 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000658  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aab  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005be  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073c  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000335  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000600  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000027fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  74:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <number>:
	
}//function

void number()		//function for assign keypad values
{
	int x=PINB;		//hexadecimal signal coming from MC 1
  7c:	86 b3       	in	r24, 0x16	; 22
  7e:	90 e0       	ldi	r25, 0x00	; 0
	if(x==0x10)
  80:	80 31       	cpi	r24, 0x10	; 16
  82:	91 05       	cpc	r25, r1
  84:	39 f4       	brne	.+14     	; 0x94 <number+0x18>
	No_of_slices=1;
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
  8e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
  92:	4f c0       	rjmp	.+158    	; 0x132 <number+0xb6>
	else if(x==0x20)
  94:	80 32       	cpi	r24, 0x20	; 32
  96:	91 05       	cpc	r25, r1
  98:	39 f4       	brne	.+14     	; 0xa8 <number+0x2c>
	No_of_slices=2;
  9a:	22 e0       	ldi	r18, 0x02	; 2
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
  a2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
  a6:	45 c0       	rjmp	.+138    	; 0x132 <number+0xb6>
	else if(x==0x30)
  a8:	80 33       	cpi	r24, 0x30	; 48
  aa:	91 05       	cpc	r25, r1
  ac:	39 f4       	brne	.+14     	; 0xbc <number+0x40>
	No_of_slices=3;
  ae:	23 e0       	ldi	r18, 0x03	; 3
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
  b6:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
  ba:	3b c0       	rjmp	.+118    	; 0x132 <number+0xb6>
	else if(x==0x40)
  bc:	80 34       	cpi	r24, 0x40	; 64
  be:	91 05       	cpc	r25, r1
  c0:	39 f4       	brne	.+14     	; 0xd0 <number+0x54>
	No_of_slices=4;
  c2:	24 e0       	ldi	r18, 0x04	; 4
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
  ca:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
  ce:	31 c0       	rjmp	.+98     	; 0x132 <number+0xb6>
	else if(x==0x50)
  d0:	80 35       	cpi	r24, 0x50	; 80
  d2:	91 05       	cpc	r25, r1
  d4:	39 f4       	brne	.+14     	; 0xe4 <number+0x68>
	No_of_slices=5;
  d6:	25 e0       	ldi	r18, 0x05	; 5
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
  de:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
  e2:	27 c0       	rjmp	.+78     	; 0x132 <number+0xb6>
	else if(x==0x60)
  e4:	80 36       	cpi	r24, 0x60	; 96
  e6:	91 05       	cpc	r25, r1
  e8:	39 f4       	brne	.+14     	; 0xf8 <number+0x7c>
	No_of_slices=6;
  ea:	26 e0       	ldi	r18, 0x06	; 6
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
  f2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
  f6:	1d c0       	rjmp	.+58     	; 0x132 <number+0xb6>
	else if(x==0x70)
  f8:	80 37       	cpi	r24, 0x70	; 112
  fa:	91 05       	cpc	r25, r1
  fc:	39 f4       	brne	.+14     	; 0x10c <number+0x90>
	No_of_slices=7;
  fe:	27 e0       	ldi	r18, 0x07	; 7
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
 106:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
 10a:	13 c0       	rjmp	.+38     	; 0x132 <number+0xb6>
	else if(x==0x80)
 10c:	80 38       	cpi	r24, 0x80	; 128
 10e:	91 05       	cpc	r25, r1
 110:	39 f4       	brne	.+14     	; 0x120 <number+0xa4>
	No_of_slices=8;
 112:	28 e0       	ldi	r18, 0x08	; 8
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
 11a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
 11e:	09 c0       	rjmp	.+18     	; 0x132 <number+0xb6>
	else if(x==0x90)
 120:	80 39       	cpi	r24, 0x90	; 144
 122:	91 05       	cpc	r25, r1
 124:	31 f4       	brne	.+12     	; 0x132 <number+0xb6>
	No_of_slices=9;
 126:	29 e0       	ldi	r18, 0x09	; 9
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <No_of_slices+0x1>
 12e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <No_of_slices>
	if(x==0xA0)
 132:	80 3a       	cpi	r24, 0xA0	; 160
 134:	91 05       	cpc	r25, r1
 136:	39 f4       	brne	.+14     	; 0x146 <number+0xca>
	Paste=10;
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	08 95       	ret
	else if(x==0xB0)
 146:	80 3b       	cpi	r24, 0xB0	; 176
 148:	91 05       	cpc	r25, r1
 14a:	39 f4       	brne	.+14     	; 0x15a <number+0xde>
	Paste=11;
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 158:	08 95       	ret
	else if(x==0xC0)
 15a:	80 3c       	cpi	r24, 0xC0	; 192
 15c:	91 05       	cpc	r25, r1
 15e:	31 f4       	brne	.+12     	; 0x16c <number+0xf0>
	Paste=12;
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	08 95       	ret

0000016e <main>:
int No_of_slices;			//No.of slices(1-9)
int Paste;					//Paste (10=BUTTER , 11=CHEESE , 12=JAM)

int main(void)
{
    DDRB &=~(1<<4);     //DEFINE PORT B4 AS A INPUT..hexadecimal keypad values coming from MC 1
 16e:	87 b3       	in	r24, 0x17	; 23
 170:	8f 7e       	andi	r24, 0xEF	; 239
 172:	87 bb       	out	0x17, r24	; 23
    DDRB &=~(1<<5);		//DEFINE PORT B5 AS A INPUT..hexadecimal keypad values coming from MC 1
 174:	87 b3       	in	r24, 0x17	; 23
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	87 bb       	out	0x17, r24	; 23
    DDRB &=~(1<<6);		//DEFINE PORT B6 AS A INPUT..hexadecimal keypad values coming from MC 1
 17a:	87 b3       	in	r24, 0x17	; 23
 17c:	8f 7b       	andi	r24, 0xBF	; 191
 17e:	87 bb       	out	0x17, r24	; 23
    DDRB &=~(1<<7);		//DEFINE PORT B7 AS A INPUT..hexadecimal keypad values coming from MC 1
 180:	87 b3       	in	r24, 0x17	; 23
 182:	8f 77       	andi	r24, 0x7F	; 127
 184:	87 bb       	out	0x17, r24	; 23
	DDRB|=(1<<0);		//DEFINE PORT B0 AS A OUTPUT..after the whole process signal send to the MC 1
 186:	87 b3       	in	r24, 0x17	; 23
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	87 bb       	out	0x17, r24	; 23
	
	DDRA =0xFF;			//DEFINE PORTA AS A OUTPUT...for stepper motors
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	8a bb       	out	0x1a, r24	; 26
	DDRC =0xF0;			//DEFINE PORTA(0-4) AS A INPUT AND (5-8) AS A OUTPUT...for Ir sensors and stepper motor
 190:	90 ef       	ldi	r25, 0xF0	; 240
 192:	94 bb       	out	0x14, r25	; 20
	DDRD =0xFF;			//DEFINE PORDD AS A OUTPUT...for servo and stepper motors
 194:	81 bb       	out	0x11, r24	; 17
	
	TCNT1 = 0;			//Set timer1 count zero for servo motors
 196:	1d bc       	out	0x2d, r1	; 45
 198:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		// Set TOP count for timer1 in ICR1 register for servo motors
 19a:	83 ec       	ldi	r24, 0xC3	; 195
 19c:	99 e0       	ldi	r25, 0x09	; 9
 19e:	97 bd       	out	0x27, r25	; 39
 1a0:	86 bd       	out	0x26, r24	; 38
	
	while(1)
	{	
		number();		//keypad values(No.of slices,paste and start command(ON))
 1a2:	0e 94 3e 00 	call	0x7c	; 0x7c <number>
		if(PINB==0xD0)  //after ON signal coming from MC 1 to start the process
 1a6:	86 b3       	in	r24, 0x16	; 22
 1a8:	80 3d       	cpi	r24, 0xD0	; 208
 1aa:	d9 f7       	brne	.-10     	; 0x1a2 <main+0x34>
 1ac:	04 c2       	rjmp	.+1032   	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
		{
			int i;
			for(i=0;i<No_of_slices;i++)     //this loop execute No.of slices value times
			{
					if(PINC & (1<<PINC0))	//if any bucket over signal coming from MC 1
 1ae:	98 99       	sbic	0x13, 0	; 19
 1b0:	0c c2       	rjmp	.+1048   	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
					{
						break;				//then stop the process
					}
					PORTA &=~(1<<0);		//rotate 0 to 90..x motion for push the bread slices
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<1);
 1b8:	8b b3       	in	r24, 0x1b	; 27
 1ba:	8d 7f       	andi	r24, 0xFD	; 253
 1bc:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<2);
 1be:	8b b3       	in	r24, 0x1b	; 27
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	8b bb       	out	0x1b, r24	; 27
					PORTA |=(1<<3);
 1c4:	8b b3       	in	r24, 0x1b	; 27
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	4f e7       	ldi	r20, 0x7F	; 127
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	41 50       	subi	r20, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x62>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x6c>
 1da:	00 00       	nop
					_delay_ms(50);
					PORTA &=~(1<<0);		//rotate 90 to 180
 1dc:	8b b3       	in	r24, 0x1b	; 27
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	8b bb       	out	0x1b, r24	; 27
					PORTA |=(1<<1);
 1e2:	8b b3       	in	r24, 0x1b	; 27
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<2);
 1e8:	8b b3       	in	r24, 0x1b	; 27
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<3);
 1ee:	8b b3       	in	r24, 0x1b	; 27
 1f0:	87 7f       	andi	r24, 0xF7	; 247
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	4f e7       	ldi	r20, 0x7F	; 127
 1f6:	8b e8       	ldi	r24, 0x8B	; 139
 1f8:	98 e0       	ldi	r25, 0x08	; 8
 1fa:	41 50       	subi	r20, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x8c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x96>
 204:	00 00       	nop
					_delay_ms(350);
					PORTA &=~(1<<0);		//rotate 180 to 90
 206:	8b b3       	in	r24, 0x1b	; 27
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<1);
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<2);
 212:	8b b3       	in	r24, 0x1b	; 27
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	8b bb       	out	0x1b, r24	; 27
					PORTA |=(1<<3);
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	8b bb       	out	0x1b, r24	; 27
 21e:	4f e7       	ldi	r20, 0x7F	; 127
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	41 50       	subi	r20, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0xb6>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0xc0>
 22e:	00 00       	nop
					_delay_ms(50);
					PORTA |=(1<<0);			//rotate 90 to 0
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	81 60       	ori	r24, 0x01	; 1
 234:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<1);
 236:	8b b3       	in	r24, 0x1b	; 27
 238:	8d 7f       	andi	r24, 0xFD	; 253
 23a:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<2);
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	8b bb       	out	0x1b, r24	; 27
					PORTA &=~(1<<3);
 242:	8b b3       	in	r24, 0x1b	; 27
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	8b bb       	out	0x1b, r24	; 27
 248:	4f e7       	ldi	r20, 0x7F	; 127
 24a:	8a e1       	ldi	r24, 0x1A	; 26
 24c:	96 e0       	ldi	r25, 0x06	; 6
 24e:	41 50       	subi	r20, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0xe0>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0xea>
 258:	00 00       	nop
					_delay_ms(250);
				
					if(Paste==10)			//when we select paste as BUTTER
 25a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 25e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	91 05       	cpc	r25, r1
 266:	09 f0       	breq	.+2      	; 0x26a <main+0xfc>
 268:	87 c0       	rjmp	.+270    	; 0x378 <main+0x20a>
					{
						if(PINC & (1<<PINC1))		//if bread slices detect from IR sensor 4
 26a:	99 9b       	sbis	0x13, 1	; 19
 26c:	80 c0       	rjmp	.+256    	; 0x36e <main+0x200>
						{
							if(PINC|(1<<PINC4) && PINC|(1<<PINC5) && PINC&(1<<PINC6) && PINC|(1<<PINC7))	//if butter paste push motor at 270 degree position
 26e:	83 b3       	in	r24, 0x13	; 19
 270:	83 b3       	in	r24, 0x13	; 19
 272:	9e 9b       	sbis	0x13, 6	; 19
 274:	17 c0       	rjmp	.+46     	; 0x2a4 <main+0x136>
 276:	83 b3       	in	r24, 0x13	; 19
							{
								PORTC |=(1<<4);			//then rotate it to the 0 degree position
 278:	85 b3       	in	r24, 0x15	; 21
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<5);
 27e:	85 b3       	in	r24, 0x15	; 21
 280:	8f 7d       	andi	r24, 0xDF	; 223
 282:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<6);
 284:	85 b3       	in	r24, 0x15	; 21
 286:	8f 7b       	andi	r24, 0xBF	; 191
 288:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<7);
 28a:	85 b3       	in	r24, 0x15	; 21
 28c:	8f 77       	andi	r24, 0x7F	; 127
 28e:	85 bb       	out	0x15, r24	; 21
 290:	4f ef       	ldi	r20, 0xFF	; 255
 292:	81 ee       	ldi	r24, 0xE1	; 225
 294:	94 e0       	ldi	r25, 0x04	; 4
 296:	41 50       	subi	r20, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x128>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x132>
 2a0:	00 00       	nop
 2a2:	4f c0       	rjmp	.+158    	; 0x342 <main+0x1d4>
								_delay_ms(200);
							}
							else if(PINC|(1<<PINC4) && PINC&(1<<PINC5) && PINC|(1<<PINC6) && PINC|(1<<PINC7))	//if butter paste push motor at 180 degree position
 2a4:	83 b3       	in	r24, 0x13	; 19
 2a6:	9d 9b       	sbis	0x13, 5	; 19
 2a8:	18 c0       	rjmp	.+48     	; 0x2da <main+0x16c>
 2aa:	83 b3       	in	r24, 0x13	; 19
 2ac:	83 b3       	in	r24, 0x13	; 19
							{
								PORTC &=~(1<<4);		//then rotate it to the 270 degree position
 2ae:	85 b3       	in	r24, 0x15	; 21
 2b0:	8f 7e       	andi	r24, 0xEF	; 239
 2b2:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<5);
 2b4:	85 b3       	in	r24, 0x15	; 21
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	85 bb       	out	0x15, r24	; 21
								PORTC |=(1<<6);
 2ba:	85 b3       	in	r24, 0x15	; 21
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<7);
 2c0:	85 b3       	in	r24, 0x15	; 21
 2c2:	8f 77       	andi	r24, 0x7F	; 127
 2c4:	85 bb       	out	0x15, r24	; 21
 2c6:	4f ef       	ldi	r20, 0xFF	; 255
 2c8:	81 ee       	ldi	r24, 0xE1	; 225
 2ca:	94 e0       	ldi	r25, 0x04	; 4
 2cc:	41 50       	subi	r20, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x15e>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x168>
 2d6:	00 00       	nop
 2d8:	34 c0       	rjmp	.+104    	; 0x342 <main+0x1d4>
								_delay_ms(200);
							}
							else if(PINC|(1<<PINC4) && PINC|(1<<PINC5) && PINC|(1<<PINC6) && PINC&(1<<PINC7))	//if butter paste push motor at 90 degree position
 2da:	83 b3       	in	r24, 0x13	; 19
 2dc:	83 b3       	in	r24, 0x13	; 19
 2de:	83 b3       	in	r24, 0x13	; 19
 2e0:	9f 9b       	sbis	0x13, 7	; 19
 2e2:	16 c0       	rjmp	.+44     	; 0x310 <main+0x1a2>
							{
								PORTC &=~(1<<4);		//then rotate it to the 180 degree position
 2e4:	85 b3       	in	r24, 0x15	; 21
 2e6:	8f 7e       	andi	r24, 0xEF	; 239
 2e8:	85 bb       	out	0x15, r24	; 21
								PORTC |=(1<<5);
 2ea:	85 b3       	in	r24, 0x15	; 21
 2ec:	80 62       	ori	r24, 0x20	; 32
 2ee:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<6);
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	8f 7b       	andi	r24, 0xBF	; 191
 2f4:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<7);
 2f6:	85 b3       	in	r24, 0x15	; 21
 2f8:	8f 77       	andi	r24, 0x7F	; 127
 2fa:	85 bb       	out	0x15, r24	; 21
 2fc:	4f ef       	ldi	r20, 0xFF	; 255
 2fe:	81 ee       	ldi	r24, 0xE1	; 225
 300:	94 e0       	ldi	r25, 0x04	; 4
 302:	41 50       	subi	r20, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x194>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0x19e>
 30c:	00 00       	nop
 30e:	19 c0       	rjmp	.+50     	; 0x342 <main+0x1d4>
								_delay_ms(200);
							}
							else if(PINC|(1<<PINC4) && PINC|(1<<PINC5) && PINC|(1<<PINC6) && PINC|(1<<PINC7))	//if butter paste push motor at 0 degree position
 310:	83 b3       	in	r24, 0x13	; 19
 312:	83 b3       	in	r24, 0x13	; 19
 314:	83 b3       	in	r24, 0x13	; 19
 316:	83 b3       	in	r24, 0x13	; 19
							{
								PORTC &=~(1<<4);		//then rotate it to the 90 degree position
 318:	85 b3       	in	r24, 0x15	; 21
 31a:	8f 7e       	andi	r24, 0xEF	; 239
 31c:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<5);
 31e:	85 b3       	in	r24, 0x15	; 21
 320:	8f 7d       	andi	r24, 0xDF	; 223
 322:	85 bb       	out	0x15, r24	; 21
								PORTC &=~(1<<6);
 324:	85 b3       	in	r24, 0x15	; 21
 326:	8f 7b       	andi	r24, 0xBF	; 191
 328:	85 bb       	out	0x15, r24	; 21
								PORTC |=(1<<7);
 32a:	85 b3       	in	r24, 0x15	; 21
 32c:	80 68       	ori	r24, 0x80	; 128
 32e:	85 bb       	out	0x15, r24	; 21
 330:	4f ef       	ldi	r20, 0xFF	; 255
 332:	81 ee       	ldi	r24, 0xE1	; 225
 334:	94 e0       	ldi	r25, 0x04	; 4
 336:	41 50       	subi	r20, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x1c8>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x1d2>
 340:	00 00       	nop
								_delay_ms(200);
							}
							TCCR1A = (1<<WGM11)|(1<<COM1A1);	// Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clock/64
 342:	82 e8       	ldi	r24, 0x82	; 130
 344:	8f bd       	out	0x2f, r24	; 47
							TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 346:	8b e1       	ldi	r24, 0x1B	; 27
 348:	8e bd       	out	0x2e, r24	; 46
							
							OCR1A = 255;	//Set servo motor at 60 position 
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	9b bd       	out	0x2b, r25	; 43
 350:	8a bd       	out	0x2a, r24	; 42
 352:	4f ef       	ldi	r20, 0xFF	; 255
 354:	81 ee       	ldi	r24, 0xE1	; 225
 356:	94 e0       	ldi	r25, 0x04	; 4
 358:	41 50       	subi	r20, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x1ea>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x1f4>
 362:	00 00       	nop
							_delay_ms(200);
							OCR1A = 65;		//Set servo motor at 0 position
 364:	81 e4       	ldi	r24, 0x41	; 65
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	9b bd       	out	0x2b, r25	; 43
 36a:	8a bd       	out	0x2a, r24	; 42
 36c:	21 c1       	rjmp	.+578    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
						}
						else if(PINC | (1<<PINC1))		//if bread slices not detect from IR sensor 4
 36e:	83 b3       	in	r24, 0x13	; 19
						{
							PORTD|=(1<<6);				//then send BREAD OVER signal to the MC 1
 370:	82 b3       	in	r24, 0x12	; 18
 372:	80 64       	ori	r24, 0x40	; 64
 374:	82 bb       	out	0x12, r24	; 18
							break;						//then stop the whole process
 376:	29 c1       	rjmp	.+594    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
						}
					}	
					
					else if(Paste==11)		//when we select paste as CHEESE
 378:	8b 30       	cpi	r24, 0x0B	; 11
 37a:	91 05       	cpc	r25, r1
 37c:	09 f0       	breq	.+2      	; 0x380 <main+0x212>
 37e:	87 c0       	rjmp	.+270    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
					{
						if(PINC & (1<<PINC2))		//if bread slices detect from IR sensor 5
 380:	9a 9b       	sbis	0x13, 2	; 19
 382:	80 c0       	rjmp	.+256    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
						{
							if(PIND|(1<<PIND0) && PIND|(1<<PIND1) && PIND&(1<<PIND2) && PIND|(1<<PIND3))		//if cheese paste push motor at 270 degree position
 384:	80 b3       	in	r24, 0x10	; 16
 386:	80 b3       	in	r24, 0x10	; 16
 388:	82 9b       	sbis	0x10, 2	; 16
 38a:	17 c0       	rjmp	.+46     	; 0x3ba <main+0x24c>
 38c:	80 b3       	in	r24, 0x10	; 16
							{
								PORTD |=(1<<0);			//then rotate it to the 0 degree position
 38e:	82 b3       	in	r24, 0x12	; 18
 390:	81 60       	ori	r24, 0x01	; 1
 392:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<1);
 394:	82 b3       	in	r24, 0x12	; 18
 396:	8d 7f       	andi	r24, 0xFD	; 253
 398:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<2);
 39a:	82 b3       	in	r24, 0x12	; 18
 39c:	8b 7f       	andi	r24, 0xFB	; 251
 39e:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<3);
 3a0:	82 b3       	in	r24, 0x12	; 18
 3a2:	87 7f       	andi	r24, 0xF7	; 247
 3a4:	82 bb       	out	0x12, r24	; 18
 3a6:	4f ef       	ldi	r20, 0xFF	; 255
 3a8:	81 ee       	ldi	r24, 0xE1	; 225
 3aa:	94 e0       	ldi	r25, 0x04	; 4
 3ac:	41 50       	subi	r20, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x23e>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x248>
 3b6:	00 00       	nop
 3b8:	4f c0       	rjmp	.+158    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
								_delay_ms(200);
							}
							else if(PIND|(1<<PIND0) && PIND&(1<<PIND1) && PIND|(1<<PIND2) && PIND|(1<<PIND3))	//if cheese paste push motor at 180 degree position
 3ba:	80 b3       	in	r24, 0x10	; 16
 3bc:	81 9b       	sbis	0x10, 1	; 16
 3be:	18 c0       	rjmp	.+48     	; 0x3f0 <main+0x282>
 3c0:	80 b3       	in	r24, 0x10	; 16
 3c2:	80 b3       	in	r24, 0x10	; 16
							{
								PORTD &=~(1<<0);		//then rotate it to the 270 degree position
 3c4:	82 b3       	in	r24, 0x12	; 18
 3c6:	8e 7f       	andi	r24, 0xFE	; 254
 3c8:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<1);
 3ca:	82 b3       	in	r24, 0x12	; 18
 3cc:	8d 7f       	andi	r24, 0xFD	; 253
 3ce:	82 bb       	out	0x12, r24	; 18
								PORTD |=(1<<2);
 3d0:	82 b3       	in	r24, 0x12	; 18
 3d2:	84 60       	ori	r24, 0x04	; 4
 3d4:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<3);
 3d6:	82 b3       	in	r24, 0x12	; 18
 3d8:	87 7f       	andi	r24, 0xF7	; 247
 3da:	82 bb       	out	0x12, r24	; 18
 3dc:	4f ef       	ldi	r20, 0xFF	; 255
 3de:	81 ee       	ldi	r24, 0xE1	; 225
 3e0:	94 e0       	ldi	r25, 0x04	; 4
 3e2:	41 50       	subi	r20, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x274>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x27e>
 3ec:	00 00       	nop
 3ee:	34 c0       	rjmp	.+104    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
								_delay_ms(200);
							}
							else if(PIND|(1<<PIND0) && PIND|(1<<PIND1) && PIND|(1<<PIND2) && PIND&(1<<PIND3))	//if cheese paste push motor at 90 degree position
 3f0:	80 b3       	in	r24, 0x10	; 16
 3f2:	80 b3       	in	r24, 0x10	; 16
 3f4:	80 b3       	in	r24, 0x10	; 16
 3f6:	83 9b       	sbis	0x10, 3	; 16
 3f8:	16 c0       	rjmp	.+44     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
							{
								PORTD &=~(1<<0);		//then rotate it to the 180 degree position
 3fa:	82 b3       	in	r24, 0x12	; 18
 3fc:	8e 7f       	andi	r24, 0xFE	; 254
 3fe:	82 bb       	out	0x12, r24	; 18
								PORTD |=(1<<1);
 400:	82 b3       	in	r24, 0x12	; 18
 402:	82 60       	ori	r24, 0x02	; 2
 404:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<2);
 406:	82 b3       	in	r24, 0x12	; 18
 408:	8b 7f       	andi	r24, 0xFB	; 251
 40a:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<3);
 40c:	82 b3       	in	r24, 0x12	; 18
 40e:	87 7f       	andi	r24, 0xF7	; 247
 410:	82 bb       	out	0x12, r24	; 18
 412:	4f ef       	ldi	r20, 0xFF	; 255
 414:	81 ee       	ldi	r24, 0xE1	; 225
 416:	94 e0       	ldi	r25, 0x04	; 4
 418:	41 50       	subi	r20, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	19 c0       	rjmp	.+50     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
								_delay_ms(200);
							}
							else if(PIND|(1<<PIND0) && PIND|(1<<PIND1) && PIND|(1<<PIND2) && PIND|(1<<PIND3))	//if cheese paste push motor at 0 degree position
 426:	80 b3       	in	r24, 0x10	; 16
 428:	80 b3       	in	r24, 0x10	; 16
 42a:	80 b3       	in	r24, 0x10	; 16
 42c:	80 b3       	in	r24, 0x10	; 16
							{
								PORTD &=~(1<<0);		//then rotate it to the 90 degree position
 42e:	82 b3       	in	r24, 0x12	; 18
 430:	8e 7f       	andi	r24, 0xFE	; 254
 432:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<1);
 434:	82 b3       	in	r24, 0x12	; 18
 436:	8d 7f       	andi	r24, 0xFD	; 253
 438:	82 bb       	out	0x12, r24	; 18
								PORTD &=~(1<<2);
 43a:	82 b3       	in	r24, 0x12	; 18
 43c:	8b 7f       	andi	r24, 0xFB	; 251
 43e:	82 bb       	out	0x12, r24	; 18
								PORTD |=(1<<3);
 440:	82 b3       	in	r24, 0x12	; 18
 442:	88 60       	ori	r24, 0x08	; 8
 444:	82 bb       	out	0x12, r24	; 18
 446:	4f ef       	ldi	r20, 0xFF	; 255
 448:	81 ee       	ldi	r24, 0xE1	; 225
 44a:	94 e0       	ldi	r25, 0x04	; 4
 44c:	41 50       	subi	r20, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 456:	00 00       	nop
								_delay_ms(200);
							}
							TCCR1A = (1<<WGM11)|(1<<COM1B1);	// Set Fast PWM, TOP in ICR1, Clear OC1B on compare match, clock/64
 458:	82 e2       	ldi	r24, 0x22	; 34
 45a:	8f bd       	out	0x2f, r24	; 47
							TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 45c:	8b e1       	ldi	r24, 0x1B	; 27
 45e:	8e bd       	out	0x2e, r24	; 46
							
							OCR1B = 255;	//Set servo motor at 60 position 
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	99 bd       	out	0x29, r25	; 41
 466:	88 bd       	out	0x28, r24	; 40
 468:	4f ef       	ldi	r20, 0xFF	; 255
 46a:	81 ee       	ldi	r24, 0xE1	; 225
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	41 50       	subi	r20, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
							_delay_ms(200);
							OCR1B = 65;		//Set servo motor at 0 position 
 47a:	81 e4       	ldi	r24, 0x41	; 65
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	99 bd       	out	0x29, r25	; 41
 480:	88 bd       	out	0x28, r24	; 40
 482:	96 c0       	rjmp	.+300    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
						}
						else if(PINC | (1<<PINC2))		//if bread slices not detect from IR sensor 5
 484:	83 b3       	in	r24, 0x13	; 19
						{
							PORTD|=(1<<6);				//then send BREAD OVER signal to the MC 1
 486:	82 b3       	in	r24, 0x12	; 18
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	82 bb       	out	0x12, r24	; 18
							break;						//then stop the whole process
 48c:	9e c0       	rjmp	.+316    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
						}
					}
					
					else if(Paste==12)		//when we select paste as JAM
 48e:	0c 97       	sbiw	r24, 0x0c	; 12
 490:	09 f0       	breq	.+2      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 492:	8e c0       	rjmp	.+284    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
					{
						if(PINC & (1<<PINC3))		//if bread slices detect from IR sensor 6
 494:	9b 9b       	sbis	0x13, 3	; 19
 496:	87 c0       	rjmp	.+270    	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
						{
							if(PINA|(1<<PINA4) && PINA|(1<<PINA5) && PINA&(1<<PINA6) && PINA|(1<<PINA7))		//if cheese paste push motor at 270 degree position
 498:	89 b3       	in	r24, 0x19	; 25
 49a:	89 b3       	in	r24, 0x19	; 25
 49c:	ce 9b       	sbis	0x19, 6	; 25
 49e:	17 c0       	rjmp	.+46     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4a0:	89 b3       	in	r24, 0x19	; 25
							{
								PORTA |=(1<<4);			//then rotate it to the 0 degree position
 4a2:	8b b3       	in	r24, 0x1b	; 27
 4a4:	80 61       	ori	r24, 0x10	; 16
 4a6:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<5);
 4a8:	8b b3       	in	r24, 0x1b	; 27
 4aa:	8f 7d       	andi	r24, 0xDF	; 223
 4ac:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<6);
 4ae:	8b b3       	in	r24, 0x1b	; 27
 4b0:	8f 7b       	andi	r24, 0xBF	; 191
 4b2:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<7);
 4b4:	8b b3       	in	r24, 0x1b	; 27
 4b6:	8f 77       	andi	r24, 0x7F	; 127
 4b8:	8b bb       	out	0x1b, r24	; 27
 4ba:	4f ef       	ldi	r20, 0xFF	; 255
 4bc:	81 ee       	ldi	r24, 0xE1	; 225
 4be:	94 e0       	ldi	r25, 0x04	; 4
 4c0:	41 50       	subi	r20, 0x01	; 1
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4ca:	00 00       	nop
 4cc:	4f c0       	rjmp	.+158    	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
								_delay_ms(200);
							}
							else if(PINA|(1<<PINA4) && PINA&(1<<PINA5) && PINA|(1<<PINA6) && PINA|(1<<PINA7))	//if cheese paste push motor at 180 degree position
 4ce:	89 b3       	in	r24, 0x19	; 25
 4d0:	cd 9b       	sbis	0x19, 5	; 25
 4d2:	18 c0       	rjmp	.+48     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4d4:	89 b3       	in	r24, 0x19	; 25
 4d6:	89 b3       	in	r24, 0x19	; 25
							{
								PORTA &=~(1<<4);		//then rotate it to the 270 degree position
 4d8:	8b b3       	in	r24, 0x1b	; 27
 4da:	8f 7e       	andi	r24, 0xEF	; 239
 4dc:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<5);
 4de:	8b b3       	in	r24, 0x1b	; 27
 4e0:	8f 7d       	andi	r24, 0xDF	; 223
 4e2:	8b bb       	out	0x1b, r24	; 27
								PORTA |=(1<<6);
 4e4:	8b b3       	in	r24, 0x1b	; 27
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<7);
 4ea:	8b b3       	in	r24, 0x1b	; 27
 4ec:	8f 77       	andi	r24, 0x7F	; 127
 4ee:	8b bb       	out	0x1b, r24	; 27
 4f0:	4f ef       	ldi	r20, 0xFF	; 255
 4f2:	81 ee       	ldi	r24, 0xE1	; 225
 4f4:	94 e0       	ldi	r25, 0x04	; 4
 4f6:	41 50       	subi	r20, 0x01	; 1
 4f8:	80 40       	sbci	r24, 0x00	; 0
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 500:	00 00       	nop
 502:	34 c0       	rjmp	.+104    	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
								_delay_ms(200);
							}
							else if(PINA|(1<<PINA4) && PINA|(1<<PINA5) && PINA|(1<<PINA6) && PINA&(1<<PINA7))	//if cheese paste push motor at 90 degree position
 504:	89 b3       	in	r24, 0x19	; 25
 506:	89 b3       	in	r24, 0x19	; 25
 508:	89 b3       	in	r24, 0x19	; 25
 50a:	cf 9b       	sbis	0x19, 7	; 25
 50c:	16 c0       	rjmp	.+44     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
							{
								PORTA &=~(1<<4);		//then rotate it to the 180 degree position
 50e:	8b b3       	in	r24, 0x1b	; 27
 510:	8f 7e       	andi	r24, 0xEF	; 239
 512:	8b bb       	out	0x1b, r24	; 27
								PORTA |=(1<<5);
 514:	8b b3       	in	r24, 0x1b	; 27
 516:	80 62       	ori	r24, 0x20	; 32
 518:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<6);
 51a:	8b b3       	in	r24, 0x1b	; 27
 51c:	8f 7b       	andi	r24, 0xBF	; 191
 51e:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<7);
 520:	8b b3       	in	r24, 0x1b	; 27
 522:	8f 77       	andi	r24, 0x7F	; 127
 524:	8b bb       	out	0x1b, r24	; 27
 526:	4f ef       	ldi	r20, 0xFF	; 255
 528:	81 ee       	ldi	r24, 0xE1	; 225
 52a:	94 e0       	ldi	r25, 0x04	; 4
 52c:	41 50       	subi	r20, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 534:	00 c0       	rjmp	.+0      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 536:	00 00       	nop
 538:	19 c0       	rjmp	.+50     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
								_delay_ms(200);
							}
							else if(PINA|(1<<PINA4) && PINA|(1<<PINA5) && PINA|(1<<PINA6) && PINA|(1<<PINA7))	//if cheese paste push motor at 0 degree position
 53a:	89 b3       	in	r24, 0x19	; 25
 53c:	89 b3       	in	r24, 0x19	; 25
 53e:	89 b3       	in	r24, 0x19	; 25
 540:	89 b3       	in	r24, 0x19	; 25
							{
								PORTA &=~(1<<4);		//then rotate it to the 90 degree position
 542:	8b b3       	in	r24, 0x1b	; 27
 544:	8f 7e       	andi	r24, 0xEF	; 239
 546:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<5);
 548:	8b b3       	in	r24, 0x1b	; 27
 54a:	8f 7d       	andi	r24, 0xDF	; 223
 54c:	8b bb       	out	0x1b, r24	; 27
								PORTA &=~(1<<6);
 54e:	8b b3       	in	r24, 0x1b	; 27
 550:	8f 7b       	andi	r24, 0xBF	; 191
 552:	8b bb       	out	0x1b, r24	; 27
								PORTA |=(1<<7);
 554:	8b b3       	in	r24, 0x1b	; 27
 556:	80 68       	ori	r24, 0x80	; 128
 558:	8b bb       	out	0x1b, r24	; 27
 55a:	4f ef       	ldi	r20, 0xFF	; 255
 55c:	81 ee       	ldi	r24, 0xE1	; 225
 55e:	94 e0       	ldi	r25, 0x04	; 4
 560:	41 50       	subi	r20, 0x01	; 1
 562:	80 40       	sbci	r24, 0x00	; 0
 564:	90 40       	sbci	r25, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 568:	00 c0       	rjmp	.+0      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 56a:	00 00       	nop
								_delay_ms(200);
							}
							TCCR2 |= (1<<WGM20)|(1<<WGM21);		// Set Fast PWM, TOP in ICR1, Clear OC2 on compare match, clock/64
 56c:	85 b5       	in	r24, 0x25	; 37
 56e:	88 64       	ori	r24, 0x48	; 72
 570:	85 bd       	out	0x25, r24	; 37
							TCCR2 |=(1<<COM21)|(0<<CS20)|(0<<CS21)|(1<<CS22);
 572:	85 b5       	in	r24, 0x25	; 37
 574:	84 62       	ori	r24, 0x24	; 36
 576:	85 bd       	out	0x25, r24	; 37
							
							OCR2 = 65;		//Set servo motor at 60 position
 578:	81 e4       	ldi	r24, 0x41	; 65
 57a:	83 bd       	out	0x23, r24	; 35
 57c:	4f ef       	ldi	r20, 0xFF	; 255
 57e:	81 ee       	ldi	r24, 0xE1	; 225
 580:	94 e0       	ldi	r25, 0x04	; 4
 582:	41 50       	subi	r20, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
 58c:	00 00       	nop
							_delay_ms(200);
							OCR2 = 187;		//Set servo motor at 0 position
 58e:	8b eb       	ldi	r24, 0xBB	; 187
 590:	83 bd       	out	0x23, r24	; 35
 592:	4f ef       	ldi	r20, 0xFF	; 255
 594:	81 ee       	ldi	r24, 0xE1	; 225
 596:	94 e0       	ldi	r25, 0x04	; 4
 598:	41 50       	subi	r20, 0x01	; 1
 59a:	80 40       	sbci	r24, 0x00	; 0
 59c:	90 40       	sbci	r25, 0x00	; 0
 59e:	e1 f7       	brne	.-8      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 5a2:	00 00       	nop
 5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
							_delay_ms(200);
						}
						else if(PINC | (1<<PINC3))		//if bread slices not detect from IR sensor 6
 5a6:	83 b3       	in	r24, 0x13	; 19
						{
							PORTD|=(1<<6);				//then send BREAD OVER signal to the MC 1
 5a8:	82 b3       	in	r24, 0x12	; 18
 5aa:	80 64       	ori	r24, 0x40	; 64
 5ac:	82 bb       	out	0x12, r24	; 18
							break;						//then stop the whole process
 5ae:	0d c0       	rjmp	.+26     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
	{	
		number();		//keypad values(No.of slices,paste and start command(ON))
		if(PINB==0xD0)  //after ON signal coming from MC 1 to start the process
		{
			int i;
			for(i=0;i<No_of_slices;i++)     //this loop execute No.of slices value times
 5b0:	2f 5f       	subi	r18, 0xFF	; 255
 5b2:	3f 4f       	sbci	r19, 0xFF	; 255
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <No_of_slices>
 5be:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <No_of_slices+0x1>
 5c2:	28 17       	cp	r18, r24
 5c4:	39 07       	cpc	r19, r25
 5c6:	0c f4       	brge	.+2      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 5c8:	f2 cd       	rjmp	.-1052   	; 0x1ae <main+0x40>
						}
					}	
			}//for
			while(1)
			{	
				if(i==No_of_slices)			//after execute No.of slices value times then process stop
 5ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <No_of_slices>
 5ce:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <No_of_slices+0x1>
 5d2:	28 17       	cp	r18, r24
 5d4:	39 07       	cpc	r19, r25
 5d6:	c9 f7       	brne	.-14     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
				{
					PORTB|=(1<<0);			//when process stop signal send to the MC 1
 5d8:	88 b3       	in	r24, 0x18	; 24
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	88 bb       	out	0x18, r24	; 24
					break;					//stop the whole process
 5de:	e1 cd       	rjmp	.-1086   	; 0x1a2 <main+0x34>

000005e0 <_exit>:
 5e0:	f8 94       	cli

000005e2 <__stop_program>:
 5e2:	ff cf       	rjmp	.-2      	; 0x5e2 <__stop_program>
